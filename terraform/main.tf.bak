terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.0"
    }
    tls = {
      source  = "hashicorp/tls"
      version = "~> 4.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# Get latest Ubuntu 20.04 LTS AMI
data "aws_ami" "ubuntu" {
  most_recent = true
  owners      = ["099720109477"]  # Canonical

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

# Security Group
resource "aws_security_group" "devops_sg" {
  name        = "devops-sg-${var.your_roll_no}"
  description = "Security group for DevOps assignment"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "SSH"
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTP"
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTPS"
  }

  ingress {
    from_port   = 8000
    to_port     = 8000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Django"
  }

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "PostgreSQL"
  }

  ingress {
    from_port   = 2377
    to_port     = 2377
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Docker Swarm"
  }

  ingress {
    from_port   = 7946
    to_port     = 7946
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Docker gossip TCP"
  }

  ingress {
    from_port   = 7946
    to_port     = 7946
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Docker gossip UDP"
  }

  ingress {
    from_port   = 4789
    to_port     = 4789
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Docker overlay"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "devops-sg-${var.your_roll_no}"
  }
}

# Generate SSH Key
resource "tls_private_key" "devops_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

# Save Private Key
resource "local_sensitive_file" "private_key" {
  content = tls_private_key.devops_key.private_key_pem
  filename          = "${path.module}/terraform-key-${var.your_roll_no}.pem"
  file_permission   = "0600"
}

# AWS Key Pair
resource "aws_key_pair" "devops_key" {
  key_name   = "devops-key-${var.your_roll_no}"
  public_key = tls_private_key.devops_key.public_key_openssh
}

# Controller Instance
resource "aws_instance" "controller" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.devops_key.key_name
  vpc_security_group_ids = [aws_security_group.devops_sg.id]

  tags = {
    Name = "controller-${var.your_roll_no}"
    Role = "controller"
  }
}

# Swarm Manager Instance
resource "aws_instance" "swarm_manager" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.devops_key.key_name
  vpc_security_group_ids = [aws_security_group.devops_sg.id]

  tags = {
    Name = "swarm-manager-${var.your_roll_no}"
    Role = "swarm-manager"
  }
}

# Swarm Worker A Instance
resource "aws_instance" "swarm_worker_a" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.devops_key.key_name
  vpc_security_group_ids = [aws_security_group.devops_sg.id]

  tags = {
    Name = "swarm-worker-a-${var.your_roll_no}"
    Role = "swarm-worker"
  }
}

# Swarm Worker B Instance
resource "aws_instance" "swarm_worker_b" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.devops_key.key_name
  vpc_security_group_ids = [aws_security_group.devops_sg.id]

  tags = {
    Name = "swarm-worker-b-${var.your_roll_no}"
    Role = "swarm-worker"
  }
}

# Elastic IPs
resource "aws_eip" "controller_eip" {
  instance = aws_instance.controller.id
  domain   = "vpc"

  tags = {
    Name = "controller-eip-${var.your_roll_no}"
  }

  depends_on = [aws_instance.controller]
}

resource "aws_eip" "swarm_manager_eip" {
  instance = aws_instance.swarm_manager.id
  domain   = "vpc"

  tags = {
    Name = "swarm-manager-eip-${var.your_roll_no}"
  }

  depends_on = [aws_instance.swarm_manager]
}

resource "aws_eip" "swarm_worker_a_eip" {
  instance = aws_instance.swarm_worker_a.id
  domain   = "vpc"

  tags = {
    Name = "swarm-worker-a-eip-${var.your_roll_no}"
  }

  depends_on = [aws_instance.swarm_worker_a]
}

resource "aws_eip" "swarm_worker_b_eip" {
  instance = aws_instance.swarm_worker_b.id
  domain   = "vpc"

  tags = {
    Name = "swarm-worker-b-eip-${var.your_roll_no}"
  }

  depends_on = [aws_instance.swarm_worker_b]
}

output "private_key_path" {
  value       = local_sensitive_file.private_key.filename
  description = "Path to private key"
}
